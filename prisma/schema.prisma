generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Configuracion {
  id                    String   @id @default(uuid())
  nombre_empresa        String
  ruc                   String   @unique
  razon_social          String
  direccion             String?
  telefono              String?
  email                 String?
  codigo_sucursal       String   @default("0000")
  punto_facturacion     String   @default("001")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ConexionHKA {
  id                String   @id @default(uuid())
  ambiente          String   @unique
  token_empresa     String
  token_password    String
  url_base          String
  activo            Boolean  @default(false)
  fecha_activacion  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PuntoRecepcion {
  id                String   @id @default(uuid())
  nombre            String
  metodo            String
  activo            Boolean  @default(false)
  api_url           String?
  api_method        String?
  api_headers       Json?
  api_frecuencia    Int?
  db_tipo           String?
  db_host           String?
  db_port           Int?
  db_database       String?
  db_usuario        String?
  db_password       String?
  db_tabla          String?
  ftp_host          String?
  ftp_port          Int?
  ftp_usuario       String?
  ftp_password      String?
  mapeo_campos      Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Factura {
  id                    String   @id @default(uuid())
  modo                  String
  numero_factura        String
  punto_facturacion     String
  codigo_sucursal       String
  tipo_documento        String
  estado                String
  cufe                  String?
  cliente_tipo          String
  cliente_ruc           String?
  cliente_nombre        String
  cliente_direccion     String?
  cliente_email         String?
  total_neto            Decimal  @db.Decimal(12,2)
  total_itbms           Decimal  @db.Decimal(12,2)
  total_factura         Decimal  @db.Decimal(12,2)
  documento_original    Json
  hka_response          Json?
  xml_firmado           String?  @db.Text
  pdf_url               String?
  items                 FacturaItem[]
  logs                  HKALog[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model FacturaItem {
  id                    String   @id @default(uuid())
  factura_id            String
  factura               Factura  @relation(fields: [factura_id], references: [id], onDelete: Cascade)
  codigo                String
  descripcion           String
  cantidad              Decimal  @db.Decimal(10,2)
  unidad_medida         String
  precio_unitario       Decimal  @db.Decimal(12,2)
  descuento             Decimal  @db.Decimal(12,2) @default(0)
  tasa_itbms            String
  valor_itbms           Decimal  @db.Decimal(12,2)
  total                 Decimal  @db.Decimal(12,2)
  createdAt             DateTime @default(now())
}

model HKALog {
  id                String   @id @default(uuid())
  factura_id        String?
  factura           Factura? @relation(fields: [factura_id], references: [id])
  operacion         String
  request           String   @db.Text
  response          String   @db.Text
  status_code       Int?
  createdAt         DateTime @default(now())
}

model FacturaCola {
  id                String   @id @default(uuid())
  punto_recepcion   String
  datos_originales  Json
  estado            String   @default("pendiente")
  intentos          Int      @default(0)
  error_mensaje     String?
  createdAt         DateTime @default(now())
  procesadaAt       DateTime?
}